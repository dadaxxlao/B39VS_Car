#include <Arduino.h>
#include "BLEService.h"
#include "WebServer.h"
#include "ArduinoBridge.h"
#include "CommProtocol.h"

// WiFi配置
const char* WIFI_SSID = "YourWiFiSSID";     // 修改为您的WiFi名称
const char* WIFI_PASSWORD = "YourPassword"; // 修改为您的WiFi密码
const char* HOSTNAME = "b39vs-car";         // 主机名

// 系统变量
SystemStateCode currentState = STATE_IDLE;  // 当前系统状态
String lastSensorData = "";                 // 最后接收的传感器数据
bool bridgeConnected = false;               // Arduino桥接连接状态
uint32_t lastStatusUpdate = 0;              // 上次状态更新时间

// Arduino串口通信
ArduinoBridge bridge(&Serial);

// 板载LED引脚
const int LED_BLE = 12;   // 蓝牙连接指示灯 (GPIO12)
const int LED_WIFI = 13;  // WiFi连接指示灯 (GPIO13)

/**
 * 处理从蓝牙或Web接收到的命令
 * @param command 命令字符串
 * @param params 参数字符串
 */
void handleCommand(const char* command, const char* params) {
    Serial.printf("Command received: %s, Params: %s\n", command, params ? params : "none");
    
    // 处理标准命令
    if (strcmp(command, "START") == 0) {
        // 转发命令到Arduino
        bridge.sendCommand(CMD_START, params);
        // 更新本地状态
        currentState = STATE_RUNNING;
        WebServer.updateState(currentState);
        BLEService.sendStatus(currentState);
        // 记录日志
        WebServer.updateLog("INFO", "Start command sent to Arduino");
        BLEService.sendLog("INFO", "Start command sent to Arduino");
    }
    else if (strcmp(command, "STOP") == 0) {
        bridge.sendCommand(CMD_STOP, params);
        currentState = STATE_IDLE;
        WebServer.updateState(currentState);
        BLEService.sendStatus(currentState);
        WebServer.updateLog("INFO", "Stop command sent to Arduino");
        BLEService.sendLog("INFO", "Stop command sent to Arduino");
    }
    else if (strcmp(command, "RESET") == 0) {
        bridge.sendCommand(CMD_RESET, params);
        currentState = STATE_IDLE;
        WebServer.updateState(currentState);
        BLEService.sendStatus(currentState);
        WebServer.updateLog("INFO", "Reset command sent to Arduino");
        BLEService.sendLog("INFO", "Reset command sent to Arduino");
    }
    else if (strcmp(command, "GET_STATUS") == 0) {
        bridge.requestStatus();
        WebServer.updateLog("INFO", "Status request sent to Arduino");
        BLEService.sendLog("INFO", "Status request sent to Arduino");
    }
    else {
        // 处理其他未知命令
        bridge.sendCommand(command, params);
        WebServer.updateLog("INFO", "Custom command sent to Arduino");
        BLEService.sendLog("INFO", "Custom command sent to Arduino");
    }
}

/**
 * 处理从Arduino接收到的状态信息
 * @param state 系统状态
 * @param params 额外参数
 */
void handleStateUpdate(SystemStateCode state, const char* params) {
    currentState = state;
    WebServer.updateState(state, params);
    BLEService.sendStatus(state, params);
}

/**
 * 处理从Arduino接收到的日志信息
 * @param level 日志级别
 * @param message 日志消息
 */
void handleLogMessage(const char* level, const char* message) {
    WebServer.updateLog(level, message);
    BLEService.sendLog(level, message);
}

/**
 * 处理从Arduino接收到的数据信息
 * @param dataType 数据类型
 * @param values 数据值
 */
void handleDataUpdate(const char* dataType, const char* values) {
    lastSensorData = String(dataType) + ":" + String(values);
    WebServer.updateData(dataType, values);
    BLEService.sendData(dataType, values);
}

void setup() {
    // 初始化串口通信（用于调试和与Arduino通信）
    Serial.begin(115200);
    delay(500);
    Serial.println("\n\nESP32-C3 B39VS Car Bridge Starting...");
    
    // 初始化板载LED
    pinMode(LED_BLE, OUTPUT);
    pinMode(LED_WIFI, OUTPUT);
    digitalWrite(LED_BLE, LOW);
    digitalWrite(LED_WIFI, LOW);
    
    // 初始化WiFi和Web服务器
    WebServer.setWiFiCredentials(WIFI_SSID, WIFI_PASSWORD);
    WebServer.setHostname(HOSTNAME);
    if (WebServer.begin(true)) {
        Serial.println("Web server started successfully");
        digitalWrite(LED_WIFI, HIGH);
    }
    
    // 设置Web服务器命令回调
    WebServer.setCommandCallback(handleCommand);
    
    // 初始化BLE服务
    if (BLEService.begin()) {
        Serial.println("BLE service started successfully");
        digitalWrite(LED_BLE, HIGH);
    }
    
    // 设置BLE命令回调
    BLEService.setCommandCallback([](const char* data) {
        // 从蓝牙消息中解析命令
        DynamicJsonDocument doc(256);
        DeserializationError error = deserializeJson(doc, data);
        
        if (!error) {
            const char* command = doc["command"];
            const char* params = doc["params"] | "";
            
            if (command) {
                handleCommand(command, params);
            }
        }
    });
    
    // 设置Arduino桥接回调
    bridge.begin();
    bridge.setStateCallback(handleStateUpdate);
    bridge.setLogCallback(handleLogMessage);
    bridge.setDataCallback(handleDataUpdate);
    
    // 记录初始化完成
    WebServer.updateLog("INFO", "ESP32-C3 bridge initialized");
    BLEService.sendLog("INFO", "ESP32-C3 bridge initialized");
}

void loop() {
    // 更新Arduino桥接
    bridge.update();
    
    // 更新Web服务器
    WebServer.update();
    
    // 更新BLE服务
    BLEService.update();
    
    // 定期发送心跳状态更新
    uint32_t currentTime = millis();
    if (currentTime - lastStatusUpdate > 10000) { // 每10秒发送一次
        lastStatusUpdate = currentTime;
        
        // 发送状态更新到Web和BLE
        WebServer.updateState(currentState);
        BLEService.sendStatus(currentState);
    }
    
    // LED状态更新
    digitalWrite(LED_BLE, BLEService.isConnected() ? HIGH : LOW);
    digitalWrite(LED_WIFI, WebServer.isWiFiConnected() ? HIGH : LOW);
    
    delay(10); // 短暂延时，防止看门狗触发
} 